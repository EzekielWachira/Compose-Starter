plugins {
    id("com.android.application")
    id("org.jetbrains.kotlin.android")
    id("dagger.hilt.android.plugin")
    id("androidx.navigation.safeargs.kotlin")
    id("kotlin-kapt")
}

android {
    def date = new Date()
    def formattedDate = date.format("dd_MM_yyyy_hh_mm_a")

    compileSdk rootProject.ext.compile_sdk_version

    defaultConfig {
        applicationId rootProject.ext.app_id
        minSdk rootProject.ext.min_sdk_version
        targetSdk rootProject.ext.target_sdk_version
        versionCode rootProject.ext.version_code
        versionName rootProject.ext.version_name
    }

    buildTypes {
        debug {
            applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName =
                            "${rootProject.name.replace(" ", "_") + "_"}" +
                                    "${variant.buildType.name + "_v"}" +
                                    "${variant.versionName + "_"}" +
                                    "${formattedDate}.apk"
                }
            }
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"),
                    "proguard-rules.pro"

            applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName =
                            "${rootProject.name.replace(" ", "_") + "_"}" +
                                    "${variant.buildType.name + "_v"}" +
                                    "${variant.versionName + "_"}" +
                                    "${formattedDate}.apk"
                }
            }
        }
    }
    signingConfigs {
        release {
            def tmpFilePath = System.getProperty("user.home") + "/work/_temp/keystore/"
            def allFilesFromDir = new File(tmpFilePath).listFiles()

            if (allFilesFromDir != null) {
                def keystoreFile = allFilesFromDir.first()
                keystoreFile.renameTo("key/key.jks")
            }

            storeFile = file("key/key.jks")
            storePassword System.getenv("SIGNING_STORE_PASSWORD")
            keyAlias System.getenv("SIGNING_KEY_ALIAS")
            keyPassword System.getenv("SIGNING_KEY_PASSWORD")
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = "11"
        freeCompilerArgs = freeCompilerArgs + [
                "-opt-in=kotlin.RequiresOptIn",
                // ... Enable experimental coroutines APIs, including Flow
                "-opt-in=kotlinx.coroutines.ExperimentalCoroutinesApi",
                "-opt-in=kotlinx.coroutines.FlowPreview",
                "-opt-in=kotlin.Experimental",
        ]
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion compose_compiler_version
    }
    packagingOptions {
        resources {
            excludes += "/META-INF/{AL2.0,LGPL2.1}"
        }
    }
    namespace("dev.atick.compose")
}

dependencies {
    implementation(project(path: ":core:ui"))
    implementation(project(path: ":network"))
    implementation(project(path: ":storage:room"))
    implementation(project(path: ":storage:preferences"))

    // ... Dagger-Hilt
    implementation("com.google.dagger:hilt-android:$hilt_version")
    kapt("com.google.dagger:hilt-android-compiler:$hilt_version")
}

kapt {
    correctErrorTypes = true
}